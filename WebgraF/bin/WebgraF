#!/usr/bin/perl -w

 #
 # Ulf Andrae, SMHI, 2005
 #

 $usage  = " \n USAGE: WebgraF -p PROJECT -e ENTRY [ -f FILE ] [ -glrhxXInmatuci ]  \n\n" ;
 $usage .=" -h Displays this help \n" ;
 $usage .=" -l List all projects and entrys \n";
 $usage .=" -b Work with a different base directory \n" ;
 $usage .=" -p PROJECT name \n";
 $usage .=" -e ENTRY name \n" ;
 $usage .=" -r Remove ENTRY or PROJECT \n";
 $usage .=" -n Rename PROJECT/ENTRY  \n";
 $usage .=" -f FILE. Add WebgraF page definition file or directory \n" ;
 $usage .="    can be FILE.js,FILE.tar or directory \n";
 $usage .=" -g Get input.js from PROJECT/ENTRY \n" ;
 $usage .=" -x Export an PROJECT/ENTRY as a tar file\n" ;
 $usage .="    This file can be opened as a stand alone web page\n";
 $usage .=" -t Transport an PROJECT/ENTRY \n" ;
 $usage .="    Creates a XXX___transport.tar file\n";
 $usage .=" -a Add a file extracted with -t \n";
 $usage .=" -I Install a new WebgraF webhome, to be used with -b \n" ;
 $usage .=" -i INFO html file linked to project or entry \n" ;
 $usage .=" -j Set host page for main page like: WebgraF -j https://hirlam.org \n";
 $usage .=" -m Message on PROJECT link \n";
 $usage .=" -c CLEANAGE Remove all ( but .html,.js) files older than CLEANAGE days from PROJECT/ENTRY \n";
 $usage .=" -u Add user name to an entry \n";
 $usage .=" \n";

 # Change you working directory here
 ##############################################
 $WEBGRAF_BASE = "" ;
 if ( $ENV{WEBGRAF_BASE}  ) { $WEBGRAF_BASE = $ENV{WEBGRAF_BASE}  ; } ;
 # Check the WebgraF directory
 if  ( ! -s "$WEBGRAF_BASE/webgraf.js" ) { die " Please set and export WEBGRAF_BASE correct : $WEBGRAF_BASE\n" ; } ;
 ##############################################

 $CALLDIR = $ENV{PWD} ; 

#
# Get input
 

$PROJECT = "WebgraF_PROJECT"  ;
$ENTRY   = "WebgraF_ENTRY"     ;
$FILE    = "any file" ;
$DELETE  = "false"    ;
$GETFILE = "false"    ;
$LIST    = "false"    ;
$GETINFO = "false"    ;
$EXPORT  = "false"    ;
$CLEAN   = "false"    ;
$ADDUSER = "false"    ;
$RENAME  = "false"    ;
$ADDFILE = "false"    ;
$INSTALL = "false"    ;
$ADD_HP  = "false"    ;
$MESSAGE = "none"     ;
$NEWNAME = "none"     ;
$BASNAME = "none"     ;
$INFO    = "none"     ;
$BASE    = $WEBGRAF_BASE  ;
$TRANSPORT  = "false" ;

$n = 0 ;
while ( <@ARGV> ) {

   if ( /-h/) { die $usage ; } ;
   if ( /-p/) { $PROJECT = $ARGV[($n + 1)] ; $PROJECT = " $PROJECT " ; } ;
   if ( /-e/) { $ENTRY   = $ARGV[($n + 1)] ; $ENTRY   = " $ENTRY "   ; } ;
   if ( /-u/) { $WEBUSER = $ARGV[($n + 1)] ; $ADDUSER = "true"       ; } ;
   if ( /-i/) { $INFO    = $ARGV[($n + 1)] ; $GETINFO = "true"       ; } ;
   if ( /-n/) { $NEWNAME = $ARGV[($n + 1)] ; $RENAME  = "true"       ; } ;
   if ( /-c/) { $CLEANAGE= $ARGV[($n + 1)] ; $CLEAN   = "true"       ; } ;
   if ( /-a/) { $FILE    = $ARGV[($n + 1)] ; $ADDFILE = "true"       ; } ;
   if ( /-j/) { $HOST_PAGE = $ARGV[($n + 1)] ; $ADD_HP = "true" ; } ;
   if ( /-f/) { $FILE    = $ARGV[($n + 1)] ; } ;
   if ( /-m/) { $MESSAGE = $ARGV[($n + 1)] ; } ;
   if ( /-d/) { die "USE -r for delete \n" ; } ;
   if ( /-t/) { $TRANSPORT = "true" ; } ;
   if ( /-I/) { $INSTALL = "true" ; } ;
   if ( /-x/) { $EXPORT  = "true" ; } ;
   if ( /-g/) { $GETFILE = "true" ; } ;
   if ( /-r/) { $DELETE  = "true" ; } ;
   if ( /-l/) { $LIST    = "true" ; } ;

   if ( /-I/) {
      if ( $ARGV[($n + 1)] ) { 
         unless ( $ARGV[($n + 1)] =~ /-/ ) { $BASNAME=$ARGV[($n + 1)]  ; };
      } ;
   } ;
   if ( /-b/) {
      if ( $ARGV[($n + 1)] ) { 
         unless ( $ARGV[($n + 1)] =~ /-/ ) { $BASE=$ARGV[($n + 1)]  ; };
      } ;
   } ;

   if ( /-X/) { if ( $ENV{WEBGRAF_XBASE} ) { $BASE = $ENV{WEBGRAF_XBASE} ; } ; } ;

   $n++ ;

} ;

if ( ! $CLEANAGE) { $CLEANAGE = 9999 ; } ;

chdir $BASE or die "Could not go to $BASE \n" ;

#
# Check name
#

if ( open FILE, "< webgraf_name.js" ) {
      $webname = <FILE> ;
      chomp $webname ;
      $webname =~s/title=//g;
      $webname = " ".$webname." at"  ;
      close FILE ;
} else { $webname ="" ; };

print "\n" ;
print " WebgraF is working with$webname $BASE \n" ;

#
# List projects and entrys
#

if ( $LIST =~ /true/ ||  ! grep(/[a-z,A-Z]/,@ARGV) ||  $n <= 2 && $BASE !~ /$WEBGRAF_BASE/  ) {
	@PROJECTS = &get_dir ;
	print " \n WebgraF contains :\n \n";
	print " PROJECTS: @PROJECTS \n";

	foreach ( @PROJECTS ) {
		s/ //g;
		chdir $_ ;
		@ENTRYS = &get_dir ;
		print "   IN $_:  @ENTRYS \n";
		chdir ".." ;
	};
	print "\n" ;

        if ( $LIST =~ /false/ ) { die $usage ; } ;
	exit ;
} ;

#
# Install a new WebgraF javascript home
#

if ( $INSTALL =~ /true/ ) {
   if ( $BASE =~ /$WEBGRAF_BASE/ ) { 
	    print " Please give full path to your new WebgraF home \n"; 
            exit ;
   } ;
   chdir $BASE or die "Could not change dir to $BASE  \n I am at $CALLDIR \n" ;
   system("rm -rf src    ; cp -r $WEBGRAF_BASE/src        .") ;
   system("rm -rf src2   ; cp -r $WEBGRAF_BASE/src2       .") ;
   system("cp -r $WEBGRAF_BASE/Make_links .") ;
   system("./Make_links .") ;

   if ( $BASNAME !~ /none/ ) { 
      open OFILE, "> webgraf_name.js";
      print OFILE "title='$BASNAME'\n" ;
      close OFILE ;
      print " Installed WebgraF javascript at $BASE with name \"$BASNAME\" \n"; 
   } else {
      print " Installed WebgraF javascript at $BASE \n"; 
   } ;

   exit ;

} ;

#
# Export an entry or a project
#

if ( $EXPORT =~ /true/ ) {

   $PROJECT =~ s/ //g ;
   print " $PROJECT \n" ;
   if ( $PROJECT =~ /WebgraF_PROJECT/ ) {
	   chdir $WEBGRAF_BASE or die ;
	   system(" tar cvf $CALLDIR/Install_WebgraF.tar Make_links src src2") ;
	   print " Created $CALLDIR/Install_WebgraF.tar \n" ;
	   exit ;
   } ;

   my @ENTRYS ;
   chdir $PROJECT or die "Could not change dir to $PROJECT \n" ;

   if ( $ENTRY   =~ /WebgraF_ENTRY/    ) { 
	print "Export $PROJECT \n" ;
        @ENTRYS = &get_dir ;
   } else {
	print "Export $ENTRY @ $PROJECT \n" ;
	$ENTRY =~ s/ //g ;
        @ENTRYS = split(':',$ENTRY) ;
   } ; 

   $XPORT=$PROJECT."_export" ;
   $XPORT =~ s/ //g ;
   $XTR = $BASE."/".$XPORT ;
   $XTR =~ s/ //g ;

   mkdir $XTR,0777 ;
   system("cp $BASE/src/* $XTR/. ") ;
   chdir $XTR or die "Could not change dir to $XTR \n" ;

   print " @ENTRYS \n" ;
   foreach $ENTRY ( @ENTRYS ) {
	   $ENTRY =~ s/ //g ;
	   $WRK=$BASE."/".$PROJECT."/".$ENTRY ;
	   $WRK =~ s/ //g ;
           if ( ! -s $WRK ) { die "$WRK does not exist \n"; } ;

	   system("cp -r $WRK $XTR ") ;

           $OLDFILE="$ENTRY"."/input.js" ;
           $NEWFILE="$ENTRY".".js" ;
	   $WRK =~ s/ //g ;
           symlink $OLDFILE, $NEWFILE ;
           &update_input_list($ENTRY) ;
	   print "Added $ENTRY to $XPORT \n" ;
   };

   &update_input_list(@ENTRYS) ;
   chdir $BASE or die "Could not change dir to $BASE \n" ;
   system("tar cvf $CALLDIR/$XPORT.tar $XPORT ") ;
   system("rm -rf $XPORT ") ;
   exit ;

};


# 
# Add external PROJECT/ENTRY extracted with -t
#

if ( $ADDFILE =~ /true/ ) {

   @TMP=split('/',$FILE);
   if ( pop(@TMP) =~/$FILE/ ) { $FILE=$CALLDIR."/".$FILE ;  };

   if ( ! $FILE               ) { print "Please give a file to add \n"; exit ; };
   if ( ! -s "$FILE" ) { print "Could not find $FILE      \n"; exit ; };
   if ( ! $FILE =~m/\.tar/    ) { print "$FILE is not a tar file   \n"; exit ; };

   chdir $BASE or die "Could not change dir to $BASE \n" ;

   @TMP=split('/',$FILE);
   @TMP=split('___',pop(@TMP));
   $len=scalar(@TMP); 

   if ( $PROJECT =~ /WebgraF_PROJECT/ ) { $PROJECT=" $TMP[0] "; } ;

   if ( $len == 2 ) {

      #
      # This is a project
      #
     
      $WRK = $PROJECT ;
      $WRK =~ s/ //g ;
      mkdir "___tmp___" ;
      chdir "___tmp___";
      system("tar xf $FILE") ;
      if ( -s "../$WRK" ) {
         chdir "../$WRK" ;
         system("cp -r ../___tmp___/$TMP[0]/* .") ;
      } else {
         system("mv $TMP[0] ../$WRK") ;
      };
      chdir $BASE or die "Could not change dir to $BASE \n" ;
      system("rm -rf ___tmp___");
      print "Added $FILE as $WRK\n";
      &make_index() ;

   } elsif ( $len == 3 ){

      #
      # This is an entry
      #

      if ( $ENTRY =~ /WebgraF_ENTRY/ ) { $ENTRY=" $TMP[1] "; } ;

      @PROJECTS = &get_dir ;
      print "PROJECTS: @PROJECTS \n";

      if ( ! grep /$PROJECT/, @PROJECTS ) {
	$WRK = $PROJECT ;
	$WRK =~ s/ //g ;
	mkdir $WRK,0777 ; 
        chdir $WRK or die "Could not go to $WRK \n" ;
	system ("ln -sf ../src/* .") ;
        system("chmod 777 *") ;
	print "Added $WRK \n";
	if ( $FILE =~ /WebgraF.tar/ ) { exit ; } ;
      } else {
	$WRK = $PROJECT ;
	$WRK =~ s/ //g ;
        chdir $WRK or die "Could not go to $WRK \n" ;
	print "Update $PROJECT \n";
      };

      @ENTRYS = &get_dir ;
      $WRK = $ENTRY ;
      $WRK =~ s/ //g ;
      if ( ! grep /$ENTRY/, @ENTRYS ) { mkdir $WRK ; @ENTRYS = (@ENTRYS,$ENTRY) ; } ;
      chdir $WRK or die "Could not go to $WRK \n" ;
      system("tar xf $FILE") ;
      system("chmod -R 777 *") ;

      chdir ".." ;

      $OLDFILE="$WRK"."/input.js" ;
      $NEWFILE="$WRK".".js" ;
      symlink $OLDFILE, $NEWFILE ;
      &update_input_list(@ENTRYS) ;

      print "Added $FILE as $WRK\n";

      chdir ".." ;

      &make_index();

   } ;

   exit ;

} ;

if ( $ADD_HP =~ /true/ ) {

           $WRK=$BASE."/host_page.txt" ;
           open OFILE, "> $WRK";
           print OFILE "$HOST_PAGE" ; 
           close OFILE ;
           chdir $BASE or die "Could not change dir to $BASE \n" ;
	   &make_index() ;
	   exit;

} ;

#
# Add an infofile to the mainpage, project or entry
#

if ( $GETINFO =~ /true/ && $GETFILE =~ /false/ && $DELETE =~ /false/ ) {

        if ( $PROJECT =~ /WebgraF_PROJECT/ ) {

           $WRK=$BASE."/info.txt" ;
           open OFILE, "> $WRK";
           print OFILE "$INFO" ; 
           close OFILE ;

           chdir $BASE or die "Could not change dir to $BASE \n" ;
	   &make_index() ;
	   exit;

        } ;
	chdir $CALLDIR or die "Could not goto $CALLDIR \n";


	if ( $ENTRY =~ /WebgraF_ENTRY/ ) { $BASENTRY=$BASE . "/" . $PROJECT ; $WRK = $PROJECT ;                }
                       	   else { $BASENTRY=$BASE . "/" . $PROJECT . "/" . $ENTRY ; $WRK=$ENTRY ;     } ;
	   $BASENTRY =~ s/ //g ;
	   $WRK      =~ s/ //g ;
	   if ( -s $INFO ) { 
		if ( $INFO =~m/\.html/) { 
			print "Copy $INFO to $BASENTRY/$WRK.html \n"; 
			system ("rm -f     $BASENTRY/$WRK.html") ; 
			system ("cp $INFO  $BASENTRY/$WRK.html") ; 
			system ("chmod 777 $BASENTRY/$WRK.html") ; 
		} else { die "I don't know what to do with $INFO \n" ; } ;
		$INFO="$PROJECT/$WRK.html" ;
	   $INFO      =~ s/ //g ;
	} ;
        if ( $ENTRY =~ /WebgraF_ENTRY/ ) {
           $OFILE=$BASE."/".$PROJECT."/info.txt" ;
           $OFILE =~ s/ //g ;
           open OFILE, "> $OFILE" or die "Project $PROJECT does not exist\n";
           print OFILE "$INFO" ; 
           close OFILE ;
        } ;

        chdir $BASE or die "Could not change dir to $BASE \n" ;
	&make_index() ;
	exit;

};


#
# Request a PROJECT for the tasks following
#

if ( $PROJECT =~ /WebgraF_PROJECT/ ) { die " Please give PROJECT \n"; } ;

#
# Transport an entry or a project
#

if ( $TRANSPORT =~ /true/) {
   $PROJECT =~ s/ //g ;
   if ( $ENTRY   =~ /WebgraF_ENTRY/    ) { 
      chdir $BASE or die "Could not change dir to $BASE \n" ;
      unless ( -s $PROJECT ) { die "Could not find project $PROJECT \n"; } ;
      $XPORT=$CALLDIR."/".$PROJECT."___transport.tar" ;
      system("tar cf $XPORT $PROJECT ") ;
   } else {
      $WRK=$BASE."/".$PROJECT."/".$ENTRY ;
      $WRK =~ s/ //g ;
      chdir $WRK or die "Could not change dir to $WRK \n" ;
      $ENTRY =~ s/ //g ;
      $XPORT=$CALLDIR."/".$PROJECT."___".$ENTRY."___transport.tar" ;
      system("tar cf $XPORT *") ;
   } ;
   print "Created $XPORT \n";
   exit ;
} ;

#
# Rename PROJECT or ENTRY
#

if ( $RENAME =~ /true/ ) {
   if ( $ENTRY =~ /WebgraF_ENTRY/ ) {
	# Rename a project
        chdir $BASE or die "Could not change dir to $BASE \n" ;
	# Rename project directory
	$WRK = $PROJECT ;
	$WRK =~ s/ //g ;
        if ( ! -s $WRK   ) { die "PROJECT $WRK does not exist \n"; } ;
        if ( -s $NEWNAME ) { die "$NEWNAME does already exist \n"; } ;
	rename $WRK,$NEWNAME ; 
        if ( -s "$NEWNAME/$WRK.html" ) { 
	   rename "$NEWNAME/$WRK.html","$NEWNAME/$NEWNAME.html" ; 
        } ;
	print "Moved  $WRK to $NEWNAME \n"; 
   } else {
   # Rename an entry
	$WRK=$BASE."/".$PROJECT ;
	$WRK =~ s/ //g ;
        if ( ! -s $WRK ) { die "$WRK does not exist \n"; } ;
 	chdir $WRK ;
	$WRK = $ENTRY ;
	$WRK =~ s/ //g ;
        if ( ! -s $WRK   ) { die "ENTRY $WRK does not exist \n"; } ;
        if ( -s $NEWNAME ) { die "$NEWNAME does already exist \n"; } ;
	rename $WRK,$NEWNAME ; 
	system("rm -f $WRK.js");
	symlink "$NEWNAME/input.js","$NEWNAME.js";
	print "Moved  $WRK to $NEWNAME \n"; 
	print "Remember to update pdir in $NEWNAME \n"; 
	&update_input_list(&get_dir) ;
	chdir ".." ;
   } ;
   &make_index() ;
   exit ;
} ;

#
# Delete project or entry
#

if ( $DELETE =~ /true/ ) {

	if ( $PROJECT !~ /WebgraF_PROJECT/ ) {

	   if ( $ENTRY !~ /WebgraF_ENTRY/ && $GETINFO =~ /false/ ) {

		$WRK = $PROJECT ;
		$WRK =~ s/ //g ;
 		chdir $WRK or die "Could not change dir to $PROJECT \n" ;
		$WRK = $ENTRY ;
		$WRK =~ s/ //g ;
		system("rm -rf $WRK $WRK.js") ;
		print " Removed entry $WRK \n" ;
		&update_input_list(&get_dir) ;
		chdir ".." ;
	   }else{
   	      if ( $GETINFO =~ /true/ && $ENTRY =~ /WebgraF_ENTRY/) {
	         $BASENTRY=$BASE . "/" . $PROJECT ; 
	         $BASENTRY =~ s/ //g ;
                 if ( ! -s $BASENTRY ) { die " $BASENTRY does not exist \n"; } ;
	         $WRK = $PROJECT ;
	         $WRK =~ s/ //g ;
	         system("rm -f $BASENTRY/$WRK.html") ;
	         $WRK=$BASE."/".$PROJECT."/info.txt" ;
	         $WRK =~ s/ //g ;
	         open OFILE, "> $WRK";
	         print OFILE "info.html" ;
	         close OFILE ;
		 print "  Removed info file from project$PROJECT\n" ;
                 chdir $BASE or die "Could not change dir to $BASE \n" ;
	      }else{
   	         if ( $ENTRY =~ /WebgraF_ENTRY/ ) {
	           system ("rm -rf $PROJECT") ;
	           print " Removed project $PROJECT \n" ;
	         }else{
	           print " Not yet implemented \n" ;
       	         } ;
       	      } ;
       	   } ;

	};

	&make_index() ;
	exit;

};


#
# Get input or info file for an entry
#

if ( $GETFILE =~ /true/ ) {
   if ( $GETINFO =~ /true/ ) {
      if ( $ENTRY  =~ /WebgraF_ENTRY/ ) { 
	$WRK=$BASE."/".$PROJECT."/".$PROJECT.".html" ;
	$OUT=$PROJECT."_info.html" ;
      } else {
	$WRK=$BASE."/".$PROJECT."/".$ENTRY."/".$ENTRY.".html" ;
	$OUT=$PROJECT ."_".$ENTRY."_info.html" ;
      } ; 
   } else {
	$WRK=$BASE."/".$PROJECT."/".$ENTRY."/input.js" ;
	$OUT=$PROJECT ."_".$ENTRY.".js" ;
   } ;

	$WRK =~ s/ //g ;
	$OUT =~ s/ //g ;
        if ( ! -s $WRK ) { die "$WRK does not exist \n"; } ;
	system("cp $WRK $CALLDIR/$OUT") ;
	print "Copied $WRK to $CALLDIR/$OUT \n" ;
	exit ;
};

if ( $ENTRY   =~ /WebgraF_ENTRY/    ) { die " Please give ENTRY   \n"; } ;

#
# Add Message
#

unless ( $MESSAGE =~ /none/ ) {
   $WRK=$BASE."/".$PROJECT."/".$ENTRY."/message.txt" ;
   $WRK =~ s/ //g ;

   open  OFILE, "> $WRK";
   print OFILE "$MESSAGE" ; 
   close OFILE ;
   if ( $FILE =~ "any file" ) { &make_index ; exit ; } ;
} ;


#
# Add user
#

if ( $ADDUSER =~ /true/ ) {
   $WRK=$BASE."/".$PROJECT."/".$ENTRY."/input.js" ;
   $WRK =~ s/ //g ;
   if ( ! $WEBUSER ) { $WEBUSER= $ENV{USER} ; } ; 
   open  OFILE, ">> $WRK";
   print OFILE "user='$WEBUSER' \n" ; 
   close OFILE ;
   exit ;
} ;

#
# Clean old files
#

if ( $CLEAN =~ /true/ ) {
	$WRK=$BASE."/".$PROJECT."/".$ENTRY ;

	$WRK =~ s/ //g ;
        if ( ! -s $WRK ) { die "$WRK does not exist \n"; } ;
	print "Clean for $CLEANAGE at $WRK \n" ;
	chdir $WRK ;
        opendir MYDIR, "." ;
        local @FILES = grep !/^\.\.?/, readdir MYDIR ;
        @FILES = grep !/.js/, @FILES ;
        @FILES = grep !/html/, @FILES  ;
        foreach ( @FILES ) { 
             $age = ( -M $_ ) ;
             if ( $age > $CLEANAGE ) { 
	        print "rm $_ $age \n "  ;
	      	system ("rm -f $_" ) ;
       	     } else { print "keep $_ $age \n "  ; } ;
	} ;
	exit ;
};


#
# Add/update a project 
#

@PROJECTS = &get_dir ;
print "PROJECTS: @PROJECTS \n";

if ( ! grep /$PROJECT/, @PROJECTS ) {
	$WRK = $PROJECT ;
	$WRK =~ s/ //g ;
	mkdir $WRK,0777 ; chdir $WRK ;
	system ("ln -sf ../src/* .") ;
        system("chmod 777 *") ;
	print "Added $WRK \n";
	if ( $FILE =~ /WebgraF.tar/ ) { exit ; } ;
} else {
	$WRK = $PROJECT ;
	$WRK =~ s/ //g ;
 	chdir $WRK ;
	print "Update $PROJECT \n";
};

#
# Add/update an entry
#

@ENTRYS = &get_dir ;
print "ENTRYS: @ENTRYS \n" ;

if ( ! grep /$ENTRY/, @ENTRYS ) {
	$WRK = $ENTRY ;
	$WRK =~ s/ //g ;
	mkdir $WRK,0755  ;
	print "Added $PROJECT/$ENTRY \n";
	@ENTRYS = (@ENTRYS,$ENTRY) ;
}else {
	print "Update $PROJECT/$ENTRY \n";

} ;

# Get the file

chdir $CALLDIR or die "Could not goto $CALLDIR \n";

$BASENTRY=$BASE . "/" . $PROJECT ."/" . $ENTRY ;
$BASENTRY =~ s/ //g ;

print "$BASENTRY \n" ;
if ( -s "$FILE" ) { 
	if ( -d "$FILE" ) { 
		print "Copy directory $FILE "; system ("cp -r $FILE/* $BASENTRY/.") 
	} elsif ( $FILE =~m/\.html/) {
		print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/info.html") 
	} elsif ( $FILE =~m/\.png/) {
		print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/.") 
	} elsif ( $FILE =~m/\.pdf/) {
		print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/.") 
	} elsif ( $FILE =~m/\.ps/) {
		print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/.") 
	} elsif ( $FILE =~m/\.js/) {
		print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/input.js")  ;
		system("echo  '<html><pre>'     > $BASENTRY/debug.html") ;
		system("cat $BASENTRY/input.js >> $BASENTRY/debug.html") ;
		system("echo  '</pre></html>'  >> $BASENTRY/debug.html") ;
	} elsif ( $FILE =~m/\.tar/) {
                print "Copy $FILE \n"; system ("cp $FILE $BASENTRY/fig.tar")  ;
                chdir $BASENTRY or die "Could not goto $BASENTRY \n";
                system ("tar xvf fig.tar; rm -f fig.tar") ;
	} else {
	       	die "I don't know what to do with $FILE \n" ;
	} ;

} else { 
	die "Could not find $FILE \n" ;
};
chdir $BASENTRY or die "Could not goto $BASENTRY \n";

chdir ".." ;
system("chmod -R 777 $ENTRY") ;
system("chmod 777 *") ;

	$WRK = $ENTRY ;
	$WRK =~ s/ //g ;
$OLDFILE="$WRK"."/input.js" ;
$NEWFILE="$WRK".".js" ;
unlink($NEWFILE) ;
symlink $OLDFILE, $NEWFILE ;
&update_input_list(@ENTRYS) ;

chdir ".." ;

&make_index(&get_dir);

#######################
sub update_input_list {
	
 $OFILE="input_list.js" ;
 open OFILE, "> $OFILE";
 $i=-1 ;
 foreach ( @_ ) { 
	 s/ //g;
	 $i++; print OFILE "input_list[$i]='$_.js' \n" ; };
 close OFILE ;
 system("chmod 777 $OFILE") ;
  

};

#######################
sub get_dir {

 opendir MYDIR, "." ;
 local @FILES = grep !/^\.\.?/, readdir MYDIR ;
 @FILES = grep !/src/, @FILES ;
 @FILES = grep !/bin/, @FILES ;
 @FILES = grep !/port/, @FILES ;
 close MYDIR ;
 local @F ;
 foreach ( @FILES ) { if ( -d $_ ) { @F = (@F," $_ ") ; }; };
 @F = sort @F ;
 return @F ;
};
#######################
sub make_index {

$OFILE="input.js" ;
open OFILE, "> $OFILE";

# Add info
 $WRK = $BASE."/info.txt" ;
 if ( -s $WRK ) { 
   open IFILE, "< $WRK";
   $I = <IFILE> ;
   close IFILE ;
   print OFILE "info='$I' \n";
 } else {
   print OFILE "info='info.html' \n";
 } ;

# Add host_page
 $WRK = $BASE."/host_page.txt" ;
 if ( -s $WRK ) { 
   open IFILE, "< $WRK";
   $I = <IFILE> ;
   close IFILE ;
   print OFILE "host_page='$I' \n";
 } ;

$i=0 ;
@P = &get_dir ;
$P=join('\',\'',@P) ;
$V ="mname=['".$P."']";
$V =~s/ //g;
print OFILE "$V \n ";

foreach ( @P ) {
	s/ //g;
	chdir $_ or die "Could not go to $_ \n" ;
	$P = $_ ;
	@E = &get_dir ;

	# Add message
        local @M = "" ;
	foreach ( @E ) {  
	 $WRK = $BASE."/".$P ."/".$_ ."/message.txt" ;
         $WRK =~s/ //g;
	 $M = "" ;
	 if ( -s $WRK ) { 
         open IFILE, "< $WRK";
	 $M = <IFILE> ;
	 close IFILE ;
	 } ;
         @M = (@M,"$M") ;
	} ;
	shift @M ;

	# Add info
	$WRK = $BASE."/".$P ."/info.txt" ;
        $WRK =~s/ //g;
        $I='';
	if ( -s $WRK ) { 
         open IFILE, "< $WRK";
	 $I = <IFILE> ;
	 close IFILE ;
	 $I ="info_list[$i]=['".$I."']";
	} ;

	$E=join('\',\'',@E) ;
	$M=join('\',\'',@M) ;
	$V ="v[$i]=['".$E."']";
	$D ="d[$i]=['".$M."']";
	$V =~s/ //g;
	print OFILE "$V \n";
	print OFILE "$D \n";
	print OFILE "$I \n";
	print OFILE "t[$i]=v[$i] \n";
	chdir ".." ;
	$i++ ;
};

close OFILE ;

system("chmod 777 *") ;

};

